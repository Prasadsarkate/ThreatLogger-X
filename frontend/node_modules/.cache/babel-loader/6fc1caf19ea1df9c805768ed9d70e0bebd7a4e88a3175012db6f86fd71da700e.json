{"ast":null,"code":"import axios from \"axios\";\n\n// Apna backend URL yaha set karo\nconst API = axios.create({\n  baseURL: \"http://127.0.0.1:8000\" // FastAPI backend\n});\n\n// Helper to get JWT token from localStorage\nconst getTokenHeader = () => {\n  const token = localStorage.getItem(\"token\");\n  if (!token) throw new Error(\"No auth token found. Please login.\");\n  return {\n    Authorization: `Bearer ${token}`\n  };\n};\n\n// -----------------------------\n// Incidents\n// -----------------------------\nexport const fetchIncidents = async (limit = 100) => {\n  const headers = getTokenHeader();\n  const res = await API.get(`/incidents`, {\n    headers,\n    params: {\n      limit\n    }\n  });\n  return res.data;\n};\n\n// -----------------------------\n// Simulator\n// -----------------------------\nexport const createDummyFiles = async (count = 50) => {\n  const headers = getTokenHeader();\n  const res = await API.post(`/simulate/create-files`, null, {\n    headers,\n    params: {\n      count\n    }\n  });\n  return res.data;\n};\nexport const runSimulation = async () => {\n  const headers = getTokenHeader();\n  const res = await API.post(\"/simulate/run\", {}, {\n    headers\n  });\n  return res.data;\n};\n\n// -----------------------------\n// Responder\n// -----------------------------\nexport const quarantineAll = async () => {\n  const headers = getTokenHeader();\n  const res = await API.post(\"/response/quarantine\", {}, {\n    headers\n  });\n  return res.data;\n};\n\n// -----------------------------\n// Reports\n// -----------------------------\nexport const generateReport = async incidentId => {\n  const headers = getTokenHeader();\n  const res = await API.post(`/report/generate`, {}, {\n    headers,\n    params: {\n      incident_id: incidentId\n    }\n  });\n  return res.data;\n};","map":{"version":3,"names":["axios","API","create","baseURL","getTokenHeader","token","localStorage","getItem","Error","Authorization","fetchIncidents","limit","headers","res","get","params","data","createDummyFiles","count","post","runSimulation","quarantineAll","generateReport","incidentId","incident_id"],"sources":["/data/data/com.termux/files/home/ThreatLogger/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\n\n// Apna backend URL yaha set karo\nconst API = axios.create({\n  baseURL: \"http://127.0.0.1:8000\", // FastAPI backend\n});\n\n// Helper to get JWT token from localStorage\nconst getTokenHeader = () => {\n  const token = localStorage.getItem(\"token\");\n  if (!token) throw new Error(\"No auth token found. Please login.\");\n  return { Authorization: `Bearer ${token}` };\n};\n\n// -----------------------------\n// Incidents\n// -----------------------------\nexport const fetchIncidents = async (limit = 100) => {\n  const headers = getTokenHeader();\n  const res = await API.get(`/incidents`, {\n    headers,\n    params: { limit },\n  });\n  return res.data;\n};\n\n// -----------------------------\n// Simulator\n// -----------------------------\nexport const createDummyFiles = async (count = 50) => {\n  const headers = getTokenHeader();\n  const res = await API.post(`/simulate/create-files`, null, {\n    headers,\n    params: { count },\n  });\n  return res.data;\n};\n\nexport const runSimulation = async () => {\n  const headers = getTokenHeader();\n  const res = await API.post(\"/simulate/run\", {}, { headers });\n  return res.data;\n};\n\n// -----------------------------\n// Responder\n// -----------------------------\nexport const quarantineAll = async () => {\n  const headers = getTokenHeader();\n  const res = await API.post(\"/response/quarantine\", {}, { headers });\n  return res.data;\n};\n\n// -----------------------------\n// Reports\n// -----------------------------\nexport const generateReport = async (incidentId) => {\n  const headers = getTokenHeader();\n  const res = await API.post(`/report/generate`, {}, {\n    headers,\n    params: { incident_id: incidentId },\n  });\n  return res.data;\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,uBAAuB,CAAE;AACpC,CAAC,CAAC;;AAEF;AACA,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAC3B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAI,CAACF,KAAK,EAAE,MAAM,IAAIG,KAAK,CAAC,oCAAoC,CAAC;EACjE,OAAO;IAAEC,aAAa,EAAE,UAAUJ,KAAK;EAAG,CAAC;AAC7C,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMK,cAAc,GAAG,MAAAA,CAAOC,KAAK,GAAG,GAAG,KAAK;EACnD,MAAMC,OAAO,GAAGR,cAAc,CAAC,CAAC;EAChC,MAAMS,GAAG,GAAG,MAAMZ,GAAG,CAACa,GAAG,CAAC,YAAY,EAAE;IACtCF,OAAO;IACPG,MAAM,EAAE;MAAEJ;IAAM;EAClB,CAAC,CAAC;EACF,OAAOE,GAAG,CAACG,IAAI;AACjB,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAAOC,KAAK,GAAG,EAAE,KAAK;EACpD,MAAMN,OAAO,GAAGR,cAAc,CAAC,CAAC;EAChC,MAAMS,GAAG,GAAG,MAAMZ,GAAG,CAACkB,IAAI,CAAC,wBAAwB,EAAE,IAAI,EAAE;IACzDP,OAAO;IACPG,MAAM,EAAE;MAAEG;IAAM;EAClB,CAAC,CAAC;EACF,OAAOL,GAAG,CAACG,IAAI;AACjB,CAAC;AAED,OAAO,MAAMI,aAAa,GAAG,MAAAA,CAAA,KAAY;EACvC,MAAMR,OAAO,GAAGR,cAAc,CAAC,CAAC;EAChC,MAAMS,GAAG,GAAG,MAAMZ,GAAG,CAACkB,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC,EAAE;IAAEP;EAAQ,CAAC,CAAC;EAC5D,OAAOC,GAAG,CAACG,IAAI;AACjB,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMK,aAAa,GAAG,MAAAA,CAAA,KAAY;EACvC,MAAMT,OAAO,GAAGR,cAAc,CAAC,CAAC;EAChC,MAAMS,GAAG,GAAG,MAAMZ,GAAG,CAACkB,IAAI,CAAC,sBAAsB,EAAE,CAAC,CAAC,EAAE;IAAEP;EAAQ,CAAC,CAAC;EACnE,OAAOC,GAAG,CAACG,IAAI;AACjB,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMM,cAAc,GAAG,MAAOC,UAAU,IAAK;EAClD,MAAMX,OAAO,GAAGR,cAAc,CAAC,CAAC;EAChC,MAAMS,GAAG,GAAG,MAAMZ,GAAG,CAACkB,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC,EAAE;IACjDP,OAAO;IACPG,MAAM,EAAE;MAAES,WAAW,EAAED;IAAW;EACpC,CAAC,CAAC;EACF,OAAOV,GAAG,CAACG,IAAI;AACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}